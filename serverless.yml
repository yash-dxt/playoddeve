service: playoddeve

configValidationMode: error
frameworkVersion: '3'

provider:
  name: aws
  region: ap-south-1
  runtime: provided.al2
  architecture: arm64
  stage: ${opt:aws-profile}
  environment:
    PROVIDER_REGION: ${self:provider.region}
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:BatchWriteItem
            - dynamodb:UpdateItem

          Resource:
            - Fn::GetAtt: [ gameTable, Arn ]


functions:
  api:
    handler: ./api
    name: ${self:service}-lambda-${self:provider.stage}
    memorySize: 128
    timeout: 5
    logRetentionInDays: 30
    events:
      - httpApi: '*'
    environment:
      GIN_MODE: ${self:custom.ginMode.${self:provider.stage}}
      TABLE_GAME: ${self:custom.gameTableName}

plugins:
  - serverless-go-plugin

custom:
  stages:
    - local
    - staging
    - prod

  ginMode:
    local: debug
    staging: release
    prod: release

  go:
    baseDir: . # folder where go.mod file lives, if set `handler` property should be set relatively to that folder
    binDir: .bin # target folder for binary files
    cgo: 0 # CGO_ENABLED flag
    cmd: GOOS=linux GOARCH=arm64 go build -ldflags="-s -w" # compile command
    monorepo: false # if enabled, builds function every directory (useful for monorepo where go.mod is managed by each function
    supportedRuntimes: ["go1.x", "provided.al2"] # the plugin compiles a function only if runtime is declared here (either on function or provider level) 
    buildProvidedRuntimeAsBootstrap: true
  
  gameTableName: '${self:service}-Game-${sls:stage}'  

resources:
  Resources:
    gameTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.gameTableName}
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: game_id
            AttributeType: S
        KeySchema:
          - AttributeName: game_id
            KeyType: HASH